import json
import logging
import os
import boto3

OK_RESPONSE = {
    'statusCode': 200,
    'headers': {'Content-Type': 'application/json'},
    'body': json.dumps('ok')
}

ERROR_RESPONSE = {
    'statusCode': 400,
    'body': json.dumps('Oops, something went wrong!')
}

def get_token(botName):
    if botName == 'broadcaster':
        botToken = broadcaster_token
    if botName == 'configurator':
        botToken = configurator_token
    return botToken

def configurator_token():
    token = os.environ.get('CONFIGURATOR_TELEGRAM_TOKEN')
    return token

def broadcaster_token():
    token = os.environ.get('BROADCASTER_TELEGRAM_TOKEN')
    return token

def subscribe_chat_to_topic(topic, chatId):
    queueName = str(chatId)
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.info('Solicitada a inscrição do chat {} no tópico {}'.format(queueName, topic))
    client = boto3.client('sns')
    topicArn = create_topic_sns(topic)
    queueArn = create_chat_sqs(queueName)
    response = client.subscribe(
        TopicArn=topicArn,
        Protocol='sqs',
        Endpoint=queueArn
    )
    return response['SubscriptionArn']

def unsubscribe_chat_from_topic(topic, chatId):
    queueName = str(chatId)
    subscriptionArn = subscribe_chat_to_topic(topic, queueName)
    client = boto3.client('sns')
    response = client.unsubscribe(subscriptionArn)
    return response

def create_topic_sns(topic):
    client = boto3.client('sns')
    response = client.create_topic(
        Name=topic
    )
    return response['TopicArn']

def create_chat_sqs(queueName):
    sqsClient = boto3.client('sqs')
    lambdaClient = boto3.client('lambda')

    awsAccount = os.environ.get('AWS_ACCOUNT_ID')

    # Confere se já existe uma fila do chat antes de tentar criar uma
    try:
        sqsResponse = sqsClient.get_queue_url(
            QueueName=queueName,
            QueueOwnerAWSAccountId=awsAccount
        )
    except:
        queueExists = False
        sqsResponse = sqsClient.create_queue(
            QueueName=queueName
        )
    else:
        queueExists = True

    # Obtém ARN a partir da URL
    queueUrl = sqsResponse['QueueUrl']
    queueAttributes = sqsClient.get_queue_attributes(
        QueueUrl=queueUrl,
        AttributeNames=[
            'QueueArn'
        ]
    )
    queueArn = queueAttributes['Attributes']['QueueArn']

    # Se a fila não existe, então também é necessário mapear ela como trigger da lambda
    if not queueExists:
        lambdaClient.create_event_source_mapping(
            EventSourceArn=queueArn,
            FunctionName='broadcast_user'
        )
    return queueArn

def send_telegram_message(chatId, message, botName='configurator'):
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.info('Publicando na fila de envio do telegram a mensagem {} para chatId {}'.format(message, chatId))
    payload = {
        'botName':botName,
        'textMessage':message
    }
    response = send_sqs_message(chatId, payload, 'outgoing-messages')
    return response

def broadcast_message(chatId, message, topic):
    create_topic_sns(topic)
    payload = {
        'user_message':message,
        'chat_id':chatId
    }
    response = publish_sns_topic(chatId, payload, topic, topic)
    return response

def publish_sns_topic(chatId, payload, snsName="send-telegram-response", topic=""):

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    sns = boto3.client('sns')  # criamos um SNS para enviar

    awsReg = os.environ.get('AWS_REGION')  # nome da região

    awsAccount = os.environ.get('AWS_ACCOUNT_ID')

    logger.info(awsReg)
    logger.info(awsAccount)
    logger.info(snsName)
    logger.info(topic)

    # aqui é o log do que vamos mandar e para onde
    logger.info('Publicando mensagem: {} no sns: {}'.format(payload, snsName))

    # vamos formatar o json de saida

    payload['chatId'] = chatId

    jhon = json.dumps(payload)

    logger.info('Publicando Json : {} no sns: {}'.format(jhon, snsName))

    # ajeitamos o sns nome correto
    arnSNS = 'arn:aws:sns:{}:{}:{}'.format(
        awsReg, awsAccount, snsName)

    logger.info("Assim ficou a string do arnSNS: {}".format(arnSNS))
    # aqui envia a resposta
    response = sns.publish(TopicArn=arnSNS, Message=jhon, Subject=topic)
    return response

def send_sqs_message(chatId, payload, sqsName, topic=''):
    logger = logging.getLogger()
    logger.setLevel(logging.INFO)

    awsAccount = os.environ.get('AWS_ACCOUNT_ID')

    sqs = boto3.client('sqs')
    sqsUrl = sqs.get_queue_url(
         QueueName=sqsName,
         QueueOwnerAWSAccountId=awsAccount
    )['QueueUrl']
    
    payload['chatId'] = chatId
    if topic != '':
        payload['topic'] = topic

    jhon = json.dumps(payload)

    logger.info('enviando para a fila: {} /n no url {} /n payload: {}'.format(sqsName, sqsUrl, jhon))

    response = sqs.send_message(
        QueueUrl=sqsUrl,
        MessageBody=jhon)
    return response